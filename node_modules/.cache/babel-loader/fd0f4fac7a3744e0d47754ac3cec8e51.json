{"ast":null,"code":"import \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nimport _slicedToArray from \"/Users/qiang/Desktop/my-hooks/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/qiang/Desktop/my-hooks/src/pages/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport json from './201909打卡情况(2).json';\nimport XLSX from 'xlsx';\nimport './index.scss';\n\nfunction uploadFilesChange(file) {\n  return new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.readAsBinaryString(file);\n\n    fileReader.onload = function () {\n      let result = this.result;\n      const workbook = XLSX.read(result, {\n        type: 'binary'\n      });\n      let obj = {};\n      Object.entries(workbook.Sheets).forEach(([keys, value]) => {\n        obj[keys] = XLSX.utils.sheet_to_json(value);\n      });\n      resolve(obj);\n    };\n  });\n}\n\nfunction allDay(month, year = new Date().getFullYear()) {\n  //判断闰年\n  if (+year % 4 === 0 && +year % 100 !== 0 || +year % 400 === 0) {\n    if (+month === 1) {\n      return 29;\n    }\n  } else {\n    return [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][+month];\n  }\n}\n\nfunction restDay(day, firstDayWeek) {\n  let saturday = [];\n  let sunday = [];\n\n  for (let i = 1; i <= day; i++) {\n    if (!firstDayWeek) {\n      if (i % 7 === 0) {\n        saturday.push(i);\n        sunday.push(i + 1);\n      } else if (i === 1) {\n        sunday.push(i);\n      }\n    } else {\n      if (i % 7 === 7 - firstDayWeek) {\n        saturday.push(i);\n\n        if (i + 1 <= day) {\n          sunday.push(i + 1);\n        }\n      }\n    }\n  }\n\n  return {\n    saturday,\n    sunday\n  };\n}\n\nfunction formateEcxal(data, name) {\n  var newData = [];\n  data.forEach(([keys, values]) => {\n    if (values && values.length) {\n      let mouth = keys.substr(0, 1);\n      let year = name.substr(0, 4);\n      let day = allDay(mouth - 1, year);\n      let firstDayWeek = new Date(\"\".concat(year, \"/\").concat(mouth, \"/1\")).getDay();\n      let restday = restDay(day, firstDayWeek);\n      let saturday = restday.saturday,\n          sunday = restday.sunday;\n      let list = [];\n      values.forEach(e => {\n        let obj = {};\n        obj.name = e['姓名'];\n        obj.workNumber = e['工号'];\n        obj.phone = e['手机号'];\n        obj.department = e['一级部门'];\n        obj.group = e['二级部门'];\n        obj.mouth = mouth;\n        obj.saturdayOvertimeList = [];\n        obj.sundayOvertimeList = [];\n        obj.overtimeList = [];\n        obj.saturday = saturday;\n        obj.sunday = sunday;\n        e['姓名'] && Object.entries(e).forEach(([key, value]) => {\n          if (key && key.split('/').length > 1) {\n            let _key$split = key.split('/'),\n                _key$split2 = _slicedToArray(_key$split, 2),\n                M = _key$split2[0],\n                D = _key$split2[1];\n\n            if (saturday.includes(+D)) {\n              obj.saturdayOvertimeList.push(D);\n            } else if (sunday.includes(+D)) {\n              console.log(value.indexOf('~') >= 0, D);\n              obj.sundayOvertimeList.push(D);\n            } else {\n              let _ref = value && value.split('~')[1].split(':'),\n                  _ref2 = _slicedToArray(_ref, 2),\n                  hour = _ref2[0],\n                  minute = _ref2[1];\n\n              if (+hour === 21 && minute >= 30 || hour > 21) {\n                obj.overtimeList.push(D);\n              }\n            }\n          }\n        });\n        obj.saturdayOvertimeNum = obj.saturdayOvertimeList.length;\n        obj.sundayOvertimeNum = obj.sundayOvertimeList.length;\n        obj.overtimeNum = obj.overtimeList.length;\n        obj.overtimePay = (obj.saturdayOvertimeList.length + obj.sundayOvertimeList.length) * 50 + obj.overtimeList.length * 20;\n        list.push(obj);\n      });\n      newData.push({\n        mouth,\n        year,\n        day,\n        firstDayWeek,\n        list\n      });\n    }\n  });\n  return newData;\n}\n\nfunction MyTable() {\n  var column = [{\n    title: '姓名',\n    width: 150,\n    dataIndex: 'name',\n    key: 'name',\n    fixed: 'left'\n  }, {\n    title: '工号',\n    width: 150,\n    dataIndex: 'workNumber',\n    key: '开发部'\n  }, {\n    title: '手机号',\n    dataIndex: 'phone',\n    key: '',\n    width: 200\n  }, {\n    title: '部门',\n    dataIndex: 'department',\n    key: '2',\n    width: 150\n  }, {\n    title: '小组',\n    dataIndex: 'group',\n    key: '3',\n    width: 150\n  }, {\n    title: '月份',\n    dataIndex: 'mouth',\n    key: '4',\n    width: 150\n  }, {\n    title: '周六加班天数',\n    dataIndex: 'saturdayOvertimeNum',\n    key: '6',\n    width: 150 // render: (item) => item.saturdayOvertimeList.length\n\n  }, {\n    title: '周日加班天数',\n    dataIndex: 'sundayOvertimeNum',\n    key: '7',\n    width: 150\n  }, {\n    title: '工作日加班天数',\n    dataIndex: 'overtimeNum',\n    key: '8',\n    width: 150\n  }, {\n    title: 'money',\n    key: 'operation',\n    fixed: 'right',\n    width: 100,\n    render: item => React.createElement(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, item.overtimePay)\n  }];\n\n  const _useState = useState(column),\n        _useState2 = _slicedToArray(_useState, 2),\n        columns = _useState2[0],\n        setColumns = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        data = _useState4[0],\n        setData = _useState4[1];\n\n  useEffect(() => {\n    setData(Object.values(json[0].prosenData));\n  }, []);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: \"upload\",\n    type: \"file\",\n    value: \"\\u4E0A\\u4F20\\u8003\\u52E4\\u8868\",\n    accept: \".xls,.xlsx\",\n    onInput: e => {\n      e.persist();\n      console.log(e, e.target.files[0], e.target.value, XLSX);\n      var files = e.target.files[0];\n      var name = files.name;\n      uploadFilesChange(files).then(res => {\n        let dataList = formateEcxal(Object.entries(res), name);\n        let data = [];\n        dataList.map(item => {\n          data.push(...item.list);\n        });\n        setData(data);\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  })), React.createElement(_Table, {\n    columns: columns,\n    dataSource: data,\n    rowKey: \"name\",\n    scroll: {\n      x: 800,\n      y: 1000\n    },\n    bordered: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }));\n}\n\nexport default MyTable;","map":{"version":3,"sources":["/Users/qiang/Desktop/my-hooks/src/pages/index.js"],"names":["React","useState","useEffect","json","XLSX","uploadFilesChange","file","Promise","resolve","reject","fileReader","FileReader","readAsBinaryString","onload","result","workbook","read","type","obj","Object","entries","Sheets","forEach","keys","value","utils","sheet_to_json","allDay","month","year","Date","getFullYear","restDay","day","firstDayWeek","saturday","sunday","i","push","formateEcxal","data","name","newData","values","length","mouth","substr","getDay","restday","list","e","workNumber","phone","department","group","saturdayOvertimeList","sundayOvertimeList","overtimeList","key","split","M","D","includes","console","log","indexOf","hour","minute","saturdayOvertimeNum","sundayOvertimeNum","overtimeNum","overtimePay","MyTable","column","title","width","dataIndex","fixed","render","item","columns","setColumns","setData","prosenData","persist","target","files","then","res","dataList","map","x","y"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Table, Upload, Button } from 'antd';\nimport json from './201909打卡情况(2).json';\nimport XLSX from 'xlsx';\nimport './index.scss';\nfunction uploadFilesChange(file) {\n\treturn new Promise((resolve, reject) => {\n\t\tconst fileReader = new FileReader();\n\t\tfileReader.readAsBinaryString(file);\n\t\tfileReader.onload = function() {\n\t\t\tlet { result } = this;\n\t\t\tconst workbook = XLSX.read(result, { type: 'binary' });\n\t\t\tlet obj = {};\n\t\t\tObject.entries(workbook.Sheets).forEach(([ keys, value ]) => {\n\t\t\t\tobj[keys] = XLSX.utils.sheet_to_json(value);\n\t\t\t});\n\t\t\tresolve(obj);\n\t\t};\n\t});\n}\n\nfunction allDay(month, year = new Date().getFullYear()) {\n\t//判断闰年\n\tif ((+year % 4 === 0 && +year % 100 !== 0) || +year % 400 === 0) {\n\t\tif (+month === 1) {\n\t\t\treturn 29;\n\t\t}\n\t} else {\n\t\treturn [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ][+month];\n\t}\n}\n\nfunction restDay(day, firstDayWeek) {\n\tlet saturday = [];\n\tlet sunday = [];\n\tfor (let i = 1; i <= day; i++) {\n\t\tif (!firstDayWeek) {\n\t\t\tif (i % 7 === 0) {\n\t\t\t\tsaturday.push(i);\n\t\t\t\tsunday.push(i + 1);\n\t\t\t} else if (i === 1) {\n\t\t\t\tsunday.push(i);\n\t\t\t}\n\t\t} else {\n\t\t\tif (i % 7 === 7 - firstDayWeek) {\n\t\t\t\tsaturday.push(i);\n\t\t\t\tif (i + 1 <= day) {\n\t\t\t\t\tsunday.push(i + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn {\n\t\tsaturday,\n\t\tsunday\n\t};\n}\nfunction formateEcxal(data, name) {\n\tvar newData = [];\n\tdata.forEach(([ keys, values ]) => {\n\t\tif (values && values.length) {\n\t\t\tlet mouth = keys.substr(0, 1);\n\t\t\tlet year = name.substr(0, 4);\n\t\t\tlet day = allDay(mouth - 1, year);\n\t\t\tlet firstDayWeek = new Date(`${year}/${mouth}/1`).getDay();\n\t\t\tlet restday = restDay(day, firstDayWeek);\n\t\t\tlet { saturday, sunday } = restday;\n\t\t\tlet list = [];\n\t\t\tvalues.forEach((e) => {\n\t\t\t\tlet obj = {};\n\t\t\t\tobj.name = e['姓名'];\n\t\t\t\tobj.workNumber = e['工号'];\n\t\t\t\tobj.phone = e['手机号'];\n\t\t\t\tobj.department = e['一级部门'];\n\t\t\t\tobj.group = e['二级部门'];\n\t\t\t\tobj.mouth = mouth;\n\t\t\t\tobj.saturdayOvertimeList = [];\n\t\t\t\tobj.sundayOvertimeList = [];\n\t\t\t\tobj.overtimeList = [];\n\t\t\t\tobj.saturday = saturday;\n\t\t\t\tobj.sunday = sunday;\n\t\t\t\te['姓名'] &&\n\t\t\t\t\tObject.entries(e).forEach(([ key, value ]) => {\n\t\t\t\t\t\tif (key && key.split('/').length > 1) {\n\t\t\t\t\t\t\tlet [ M, D ] = key.split('/');\n\n\t\t\t\t\t\t\tif (saturday.includes(+D)) {\n\t\t\t\t\t\t\t\tobj.saturdayOvertimeList.push(D);\n\t\t\t\t\t\t\t} else if (sunday.includes(+D)) {\n\t\t\t\t\t\t\t\tconsole.log(value.indexOf('~') >= 0, D);\n\t\t\t\t\t\t\t\tobj.sundayOvertimeList.push(D);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tlet [ hour, minute ] = value && value.split('~')[1].split(':');\n\t\t\t\t\t\t\t\tif ((+hour === 21 && minute >= 30) || hour > 21) {\n\t\t\t\t\t\t\t\t\tobj.overtimeList.push(D);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\tobj.saturdayOvertimeNum = obj.saturdayOvertimeList.length;\n\t\t\t\tobj.sundayOvertimeNum = obj.sundayOvertimeList.length;\n\t\t\t\tobj.overtimeNum = obj.overtimeList.length;\n\t\t\t\tobj.overtimePay =\n\t\t\t\t\t(obj.saturdayOvertimeList.length + obj.sundayOvertimeList.length) * 50 +\n\t\t\t\t\tobj.overtimeList.length * 20;\n\t\t\t\tlist.push(obj);\n\t\t\t});\n\t\t\tnewData.push({\n\t\t\t\tmouth,\n\t\t\t\tyear,\n\t\t\t\tday,\n\t\t\t\tfirstDayWeek,\n\t\t\t\tlist\n\t\t\t});\n\t\t}\n\t});\n\treturn newData;\n}\n\nfunction MyTable() {\n\tvar column = [\n\t\t{\n\t\t\ttitle: '姓名',\n\t\t\twidth: 150,\n\t\t\tdataIndex: 'name',\n\t\t\tkey: 'name',\n\t\t\tfixed: 'left'\n\t\t},\n\t\t{\n\t\t\ttitle: '工号',\n\t\t\twidth: 150,\n\t\t\tdataIndex: 'workNumber',\n\t\t\tkey: '开发部'\n\t\t},\n\t\t{\n\t\t\ttitle: '手机号',\n\t\t\tdataIndex: 'phone',\n\t\t\tkey: '',\n\t\t\twidth: 200\n\t\t},\n\t\t{\n\t\t\ttitle: '部门',\n\t\t\tdataIndex: 'department',\n\t\t\tkey: '2',\n\t\t\twidth: 150\n\t\t},\n\t\t{\n\t\t\ttitle: '小组',\n\t\t\tdataIndex: 'group',\n\t\t\tkey: '3',\n\t\t\twidth: 150\n\t\t},\n\t\t{\n\t\t\ttitle: '月份',\n\t\t\tdataIndex: 'mouth',\n\t\t\tkey: '4',\n\t\t\twidth: 150\n\t\t},\n\t\t{\n\t\t\ttitle: '周六加班天数',\n\t\t\tdataIndex: 'saturdayOvertimeNum',\n\t\t\tkey: '6',\n\t\t\twidth: 150\n\t\t\t// render: (item) => item.saturdayOvertimeList.length\n\t\t},\n\t\t{\n\t\t\ttitle: '周日加班天数',\n\t\t\tdataIndex: 'sundayOvertimeNum',\n\t\t\tkey: '7',\n\t\t\twidth: 150\n\t\t},\n\t\t{\n\t\t\ttitle: '工作日加班天数',\n\t\t\tdataIndex: 'overtimeNum',\n\t\t\tkey: '8',\n\t\t\twidth: 150\n\t\t},\n\t\t{\n\t\t\ttitle: 'money',\n\t\t\tkey: 'operation',\n\t\t\tfixed: 'right',\n\t\t\twidth: 100,\n\t\t\trender: (item) => <a>{item.overtimePay}</a>\n\t\t}\n\t];\n\tconst [ columns, setColumns ] = useState(column);\n\tconst [ data, setData ] = useState([]);\n\tuseEffect(() => {\n\t\tsetData(Object.values(json[0].prosenData));\n\t}, []);\n\treturn (\n\t\t<div>\n\t\t\t<div>\n\t\t\t\t<input\n\t\t\t\t\tclassName=\"upload\"\n\t\t\t\t\ttype=\"file\"\n\t\t\t\t\tvalue='上传考勤表'\n\t\t\t\t\taccept=\".xls,.xlsx\"\n\t\t\t\t\tonInput={(e) => {\n\t\t\t\t\t\te.persist();\n\t\t\t\t\t\tconsole.log(e, e.target.files[0], e.target.value, XLSX);\n\t\t\t\t\t\tvar files = e.target.files[0];\n\t\t\t\t\t\tvar name = files.name;\n\t\t\t\t\t\tuploadFilesChange(files).then((res) => {\n\t\t\t\t\t\t\tlet dataList = formateEcxal(Object.entries(res), name);\n\t\t\t\t\t\t\tlet data = [];\n\t\t\t\t\t\t\tdataList.map((item) => {\n\t\t\t\t\t\t\t\tdata.push(...item.list);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tsetData(data);\n\t\t\t\t\t\t});\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<Table columns={columns} dataSource={data} rowKey=\"name\" scroll={{ x: 800, y: 1000 }} bordered />\n\t\t</div>\n\t);\n}\nexport default MyTable;\n"]},"metadata":{},"sourceType":"module"}